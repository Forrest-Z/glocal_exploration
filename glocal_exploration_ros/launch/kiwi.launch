<launch>
  <!-- General arguments -->
  <arg name="debug_mode"
       default="false"
       doc="Run the mapper in debug mode."/>
  <arg name="show_rviz"
       default="true"
       doc="Automatically launch Rviz."/>

  <!-- Experiment arguments -->
  <arg name="record_data" default="true"/>
  <arg name="record_visualization" default="false"/>
  <arg name="data_path" default="/home/kiwi/glocal_experiment_data/data"/>
  <arg name="time_limit" default="30"/> <!-- min -->
  <arg name="data_interval" default="5"/>  <!-- sec -->
  <arg name="planner_node_name"
       default="/glocal_system"/> <!-- Name of GLocal's ROS node -->
  <arg name="place_recognition_simulator_config" default=""
       doc="Path to place recognition simulator config. Leave blank to disable."/>

  <!-- MAV arguments -->
  <arg name="mav_name" default="kiwi"/>
  <arg name="namespace" default="$(arg mav_name)" />
  <!--  <arg name="mav_startup_params" default="parameters/mavs/loon/px4_config.yaml"/> -->
  <arg name="dir_launch_files" value="$(find mav_startup)/launch/pixhawk/noliro" />
  <arg name="dir_sensor_launch_files" value="$(find mav_startup)/launch/sensors" />

  <arg name="state_estimator" value="rovio" /> <!-- Options: rovio, loam, vicon -->

  <arg name="auto_reset_cam_topics" default="true" />
  <arg name="transform_topic" default="rovio/transform" />
  <arg name="odometry_topic" default="/kiwi/msf_core/odometry"/> <!-- odom_predictor/predicted_odometry / msf_core/odometry -->
  <arg name="global_frame_id" default="world" /> <!-- world vicon map  -->
  <arg name="local_frame_id" default="odom" />   <!--odom vicon: world -->

  <!-- Planner arguments -->
  <arg name="planner_config" default="experiments/kiwi/glocal.yaml"/>

  <!-- Automatically generated arguments -->
  <arg unless="$(arg debug_mode)" name="launch_prefix" value=""/>
  <arg if="$(arg debug_mode)" name="launch_prefix"
       value="gdb -ex run --args"/>





  <!-- static tf -->
  <node pkg="tf" type="static_transform_publisher"
        name="static_tf_mission_odom"
        args="0 0 0 0 0 0 1 /odom /mission 100"/>
  <node pkg="tf" type="static_transform_publisher"
        name="static_tf_mission_world"
        args="0 0 0 0 0 0 1 /mission /world 100"/>
        

  <group ns="$(arg namespace)" >
  
    <!-- ============= Core ============= -->
    <include if="false" file="$(arg dir_launch_files)/mavros_noliro.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
    </include>

    <include if="false" file="$(arg dir_launch_files)/$(arg state_estimator)_noliro.launch" >
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="local_frame_id" value="$(arg local_frame_id)" />
      <arg name="global_frame_id" value="$(arg global_frame_id)" />
    </include>

    <include if="false" file="$(arg dir_launch_files)/mav_nonlinear_mpc_noliro.launch" >
      <arg name="odometry" value="$(arg odometry_topic)" />
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="mpc_config_file_name" value="nonlinear_mpc_mbzirc2020" />
      <arg name="dist_observer_config_file_name" value="disturbance_observer_mbzirc2020" />
    </include>


    <!-- ============= Sensor Drivers ============= -->
    <include if="false" file="$(arg dir_sensor_launch_files)/versavis_cam.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="auto_reset_cam_topics" value="$(arg auto_reset_cam_topics)" />
      <arg name="cam0_serial" default="19367007" />
      <arg name="imu_offset_us" value="21719"/>
    </include>

    <include if="false" file="$(arg dir_sensor_launch_files)/ouster_lidar.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
    </include>
  </group>
  
  
  <!-- ============= Mapping & Planning ============= -->
  <group ns="glocal">
    <!-- Planner -->
    <node name="glocal_system" pkg="glocal_exploration_ros"
          type="glocal_system_node"
          output="screen" launch-prefix="$(arg launch_prefix)">
        <rosparam command="load"
                  file="$(find glocal_exploration_ros)/config/$(arg planner_config)"/>
        <remap from="~pointcloud" to="/kiwi/lidar_undistortion/pointcloud_corrected"/>
        <remap from="odometry" to="$(arg odometry_topic)"/>
<!--        <remap from="command/pose" to="/$(arg mav_name)/command/pose"/>-->
        <remap from="~/global_planner/submap_in"
               to="~/mapping/submap_esdfs"/>
        <remap from="~/global_planner/submap_pose_in"
               to="~/mapping/submap_poses"/>
    </node>
  
    <!-- Trajectory Adapter -->
    <node name="trajectory_adapter" pkg="active_3d_planning_app_reconstruction"
          type="trajectory_adapter" output="screen">
        <rosparam command="load" file="$(find glocal_exploration_ros)/config/experiments/kiwi/trajectory_adapter.yaml"/>
        <remap from="odometry_in" to="$(arg odometry_topic)"/>
        <remap from="request_in" to="command/pose"/>
        <remap from="/glocal/command/trajectory" to="/kiwi/command/trajectory"/>
    </node>
  </group>

  <!-- Visualization -->
  <group if="$(arg show_rviz)">
      <arg name="rviz_file"
           default="$(find glocal_exploration_ros)/config/visualization/glocal.rviz"/>
      <node type="rviz" name="rviz" pkg="rviz" args="-d $(arg rviz_file)"/>
  </group>

  <!-- Experiment startup and Evaluation -->
  <group ns="evaluation">
    <!-- Manager -->
    <node name="experiment_manager" pkg="glocal_exploration_ros"
          type="physical_experiment_manager.py" output="screen" required="false">
      <remap from="collision" to="/$(arg mav_name)/collision"/>
      <param name="ns_planner"
             value="/glocal/glocal_system/toggle_running"/>
      <param name="ns_voxblox" value="voxblox_gt"/>
      <param name="evaluate" value="$(arg record_data)"/>
      <param name="eval_directory" value="$(arg data_path)"/>
      <param name="time_limit" value="$(arg time_limit)"/>
      <param name="eval_frequency" value="$(arg data_interval)"/>
      <param name="planner_node_name" value="$(arg planner_node_name)"/>

      <param name="startup_timeout" value="30.0"/>
    </node>

    <!-- Ground truth reconstruction -->
    <node name="voxblox_gt" pkg="voxblox_ros" type="esdf_server"
          if="$(arg record_data)">
      <rosparam command="load"
                file="$(find glocal_exploration_ros)/config/experiments/general/voxblox/ground_truth.yaml"/>
      <remap from="pointcloud" to="/$(arg mav_name)/Lidar"/>
    </node>

    <!-- Record visualization topics -->
    <node pkg="rosbag" type="record" name="rosbag_vis_recorder"
          args="record -o $(arg data_path)/tmp_bags/tmp_bag /clock /rosout /tf /tf_static /glocal/glocal_system/global_planner/executed_path /glocal/glocal_system/global_planner/frontiers /glocal/glocal_system/global_planner/goal_points /glocal/glocal_system/global_planner/planned_path /glocal/glocal_system/local_planner/executed_path /glocal/glocal_system/local_planner/tree /glocal/glocal_system/mapping/separated_mesh /glocal/glocal_system/mapping/mesh /place_recognition_simulator/loop_closure_vis /place_recognition_simulator/recognizeable_areas"
          if="$(eval arg('record_data') and arg('record_visualization'))"/>
  </group>

</launch>
